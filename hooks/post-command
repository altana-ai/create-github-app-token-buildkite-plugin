#!/bin/bash
set -euo pipefail

echo "--- :github: GitHub App Token Cleanup"

PLUGIN_PREFIX="CREATE_GITHUB_APP_TOKEN"

# Plugin configuration reader function
function plugin_read_config() {
  local var="BUILDKITE_PLUGIN_${PLUGIN_PREFIX}_${1}"
  local default="${2:-}"
  local value="${!var:-$default}"

  # Handle environment variable expansion for values starting with $
  if [[ "$value" =~ ^\$([A-Za-z_][A-Za-z0-9_]*) ]]; then
    local env_var="${BASH_REMATCH[1]}"
    echo "${!env_var}"
  else
    echo "$value"
  fi
}

output_variable=$(plugin_read_config "OUTPUT_VARIABLE" "GITHUB_TOKEN")
skip_token_revoke=$(plugin_read_config "SKIP_TOKEN_REVOKE" "false")

# Function to revoke token
revoke_token() {
  local token="$1"
  local api_url="$2"

  echo "üîê Revoking GitHub App token..."

  # Make DELETE request to revoke the token
  local response
  response=$(curl -s -w "%{http_code}" -X DELETE \
    -H "Authorization: token $token" \
    -H "Accept: application/vnd.github.v3+json" \
    "${api_url}/installation/token" 2>/dev/null || echo "000")

  local http_code="${response: -3}"

  if [[ "$http_code" == "204" ]]; then
    echo "‚úÖ Token revoked successfully"
  else
    echo "‚ö†Ô∏è Warning: Token revocation failed (HTTP $http_code). Token may still be active."
  fi
}

# Handle token revocation
if [[ "$skip_token_revoke" == "true" ]]; then
  echo "‚ÑπÔ∏è Token revocation disabled (skip-token-revoke=true)"
elif [[ -n "${GITHUB_APP_TOKEN_FOR_REVOCATION:-}" ]]; then
  revoke_token "$GITHUB_APP_TOKEN_FOR_REVOCATION" "${GITHUB_API_URL_FOR_REVOCATION:-https://api.github.com}"
  # Clear the token from memory
  unset GITHUB_APP_TOKEN_FOR_REVOCATION GITHUB_API_URL_FOR_REVOCATION
else
  echo "‚ÑπÔ∏è No token available for revocation (token may have been created with skip-token-revoke=true)"
fi

# Clean up token from environment
if [[ -n "${!output_variable:-}" ]]; then
  echo "üßπ Cleaning up GitHub App token from environment variable $output_variable"
  unset "$output_variable"
  # Verify cleanup was successful
  if [[ -z "${!output_variable:-}" ]]; then
    echo "‚úÖ Environment variable $output_variable successfully cleared"
  else
    echo "‚ö†Ô∏è Warning: Failed to clear environment variable $output_variable"
  fi
else
  echo "‚ÑπÔ∏è Environment variable $output_variable is not set (nothing to clean up)"
fi
